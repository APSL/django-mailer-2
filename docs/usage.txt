=====
Usage
=====

django-mailer-2 is asynchronous so in addition to putting mail on the queue you
need to periodically tell it to clear the queue and actually send the mail.

The latter is done via a command extension.


Queueing E-mails
================

Django Mailer 2 provides replacements for Django's core mail support for the
send_mail, mail_admins and mail_managers functions.

To favour, but not require, django-mailer-2 in your code, you can set up your
applications with the following code:

    from django.conf import settings 

    # Favour django-mailer-2 but fall back to django.core.mail.
    # mail_admins and mail_managers could also be imported if required.
    if "django_mailer" in settings.INSTALLED_APPS:
        from django_mailer import send_mail
    else:
        from django.core.mail import send_mail

and then just call the functions like you normally would in Django::

    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)
    mail_admins(subject, message_body)
    mail_managers(subject, message_body)

If you have an ``EmailMessage`` you would like to queue (which may contain HTML
or other attachments), you can use the ``queue_email_message`` function:

    from django import mail
    
    msg = mail.EmailMessage('Hi', 'Hi Joe', from='jane@somewhere',
                            to=['joe@somewhere'])
    queue_email_message(msg)

Implicitly Queue all E-mails
----------------------------

You can also use Django Mailer 2 to implicitly queue all e-mails.

To queue email, call the ``queue_django_mail`` function to your project's root
URL configuration module::

    from django_mailer import queue_django_mail
    queue_django_mail()

From this point on, all e-mail sent via the normal email methods (including
direct calls to ``EmailMessage.send()``) will go via the Django Mailer 2 queue.

You can revert back to the standard behaviour if you need to::

    from django_mailer import restore_django_mail
    restore_django_mail()


Clear the Queue
===============

With mailer in your INSTALLED_APPS, there will be two new manage.py commands
you can run:

 * ``send_mail`` will clear the current message queue. If there are any
   failures, they will be marked deferred and will not be attempted again by
   ``send_mail``.

 * ``retry_deferred`` will move any deferred mail back into the normal queue
   (so it will be attempted again on the next ``send_mail``).

Setting up a cron job
---------------------

You may want to set these up via cron to run regularly::

    * * * * * (cd $PROJECT; python manage.py send_mail >> $PROJECT/cron_mail.log 2>&1)
    0,20,40 * * * * (cd $PROJECT; python manage.py retry_deferred >> $PROJECT/cron_mail_deferred.log 2>&1)

This attempts to send mail every minute with a retry on failure every 20
minutes.

``manage.py send_mail`` uses a lock file in case clearing the queue takes
longer than the interval between calling ``manage.py send_mail``.

Note that if your project lives inside a virtualenv, you also have to execute
this command from the virtualenv. The same, naturally, applies also if you're
executing it with cron.
